name: Release workflow
on:
  create:
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: install
        args: 'toml-cli'
    - run: |
        TEMP_FILE="$(mktemp)"
        VERSION=$(git describe --tags --abbrev=0)
        echo ${VERSION:1} > ./version
        cd python
        toml set Cargo.toml package.version ${VERSION:1} > "$TEMP_FILE"
        mv "$TEMP_FILE" Cargo.toml
      shell: bash
    - name: maturin-action
      uses: messense/maturin-action@v1.40.7
      with:
        maturin-version: latest
        command: sdist
        args: -m python/Cargo.toml
    - name: maturin-action
      uses: messense/maturin-action@v1.40.7
      with:
        maturin-version: latest
        target: x86_64-unknown-linux-musl
        manylinux: musllinux_1_2
        before-script-linux: |
          echo "Building OpenSSL"
          export OPENSSL_VERSION=1.1.1m
          ls /usr/include/linux
          mkdir -p /usr/local/musl/include
          ln -s /usr/include/linux /usr/local/musl/include/linux
          ln -s /usr/include/x86_64-linux-gnu/asm /usr/local/musl/include/asm
          ln -s /usr/include/asm-generic /usr/local/musl/include/asm-generic
          cd /tmp
          short_version="$(echo "$OPENSSL_VERSION" | sed s'/[a-z]$//' )"
          curl -fLO "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
          curl -fLO "https://www.openssl.org/source/old/$short_version/openssl-$OPENSSL_VERSION.tar.gz"
          tar xvzf "openssl-$OPENSSL_VERSION.tar.gz" && cd "openssl-$OPENSSL_VERSION"
          env CC=musl-gcc ./Configure no-shared no-zlib -fPIC --prefix=/usr/local/musl -DOPENSSL_NO_SECURE_MEMORY linux-x86_64
          env C_INCLUDE_PATH=/usr/local/musl/include/ make depend
          env C_INCLUDE_PATH=/usr/local/musl/include/ make
          make install 
          rm /usr/local/musl/include/linux /usr/local/musl/include/asm /usr/local/musl/include/asm-generic
          rm -r /tmp/*
        command: build
        args: --release -m python/Cargo.toml -i 3.7 3.8 3.9 3.10 3.11 3.12
    - name: Archive Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sdist
        path: ./target/wheels/
        if-no-files-found: error
    - name: Archive Version
      uses: actions/upload-artifact@v2
      with:
        name: version
        path: ./version
        if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: version
    - id: get_version
      run: 'echo ::set-output "name=VERSION::$(cat ./version)"'
      shell: bash
    - name: Build Changelog
      id: github_release
      uses: mikepenz/release-changelog-builder-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: sdist
    - name: Upload release asset
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}
      with:
        body: |
          New release for ${{ github.sha }}.
          ${{ steps.github_release.outputs.changelog }}
        files: ./bswitch_python-*
  pypi-publish:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: sdist
        path: dist
    - name: Upload to pypi
      uses: pypa/gh-action-pypi-publish@release/v1
